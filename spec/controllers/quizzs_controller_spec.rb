require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe QuizzsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Quizz. As you add validations to Quizz, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:intro_text => 'some text', :name => 'quizz name'}
  }

  let(:invalid_attributes) {
    {:intro_text => ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuizzsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all quizzs as @quizzs' do
      quizz = Quizz.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:quizzs)).to eq([quizz])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested quizz as @quizz' do
      quizz = Quizz.create! valid_attributes
      get :show, {:id => quizz.to_param}, valid_session
      expect(assigns(:quizz)).to eq(quizz)
    end

    it 'assigns @checked_answer_ids to empty array' do
      quizz = Quizz.create! valid_attributes
      get :show, {:id => quizz.to_param}, valid_session
      expect(assigns(:checked_answer_ids)).to eq([])
    end
  end

  describe 'GET #new' do
    login_user
    it 'assigns a new quizz as @quizz' do
      get :new, {}, valid_session
      expect(assigns(:quizz)).to be_a_new(Quizz)
    end
  end

  describe 'GET #edit' do
    login_user
    it 'assigns the requested quizz as @quizz' do
      quizz = Quizz.create! valid_attributes
      get :edit, {:id => quizz.to_param}, valid_session
      expect(assigns(:quizz)).to eq(quizz)
    end
  end

  describe 'POST #create' do
    login_user
    context 'with valid params' do
      it 'creates a new Quizz' do
        expect {
          post :create, {:quizz => valid_attributes}, valid_session
        }.to change(Quizz, :count).by(1)
      end

      it 'assigns a newly created quizz as @quizz' do
        post :create, {:quizz => valid_attributes}, valid_session
        expect(assigns(:quizz)).to be_a(Quizz)
        expect(assigns(:quizz)).to be_persisted
      end

      it 'redirects to questions quizzs' do
        post :create, {:quizz => valid_attributes}, valid_session
        expect(response).to redirect_to(quizz_questions_path(Quizz.last))
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved quizz as @quizz' do
        post :create, {:quizz => invalid_attributes}, valid_session
        expect(assigns(:quizz)).to be_a_new(Quizz)
      end

      it "re-renders the 'new' template" do
        post :create, {:quizz => invalid_attributes}, valid_session
        expect(response).to render_template('new')
      end
    end
  end


  describe 'PUT #update' do
    login_user
    context 'with valid params' do
      let(:new_attributes) {
        {:intro_text => 'some new text'}
      }

      it 'updates the requested quizz' do
        quizz = Quizz.create! valid_attributes
        put :update, {:id => quizz.to_param, :quizz => new_attributes}, valid_session
        quizz.reload
        assert_equal 'some new text', quizz.intro_text
      end

      it 'assigns the requested quizz as @quizz' do
        quizz = Quizz.create! valid_attributes
        put :update, {:id => quizz.to_param, :quizz => valid_attributes}, valid_session
        expect(assigns(:quizz)).to eq(quizz)
      end

      it 'redirects to the quizz' do
        quizz = Quizz.create! valid_attributes
        put :update, {:id => quizz.to_param, :quizz => valid_attributes}, valid_session
        expect(response).to redirect_to(quizz)
      end
    end

    context 'with invalid params' do
      it 'assigns the quizz as @quizz' do
        quizz = Quizz.create! valid_attributes
        put :update, {:id => quizz.to_param, :quizz => invalid_attributes}, valid_session
        expect(assigns(:quizz)).to eq(quizz)
      end

      it "re-renders the 'edit' template" do
        quizz = Quizz.create! valid_attributes
        put :update, {:id => quizz.to_param, :quizz => invalid_attributes}, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    login_user
    it 'destroys the requested quizz' do
      quizz = Quizz.create! valid_attributes
      expect {
        delete :destroy, {:id => quizz.to_param}, valid_session
      }.to change(Quizz, :count).by(-1)
    end

    it 'redirects to the quizzs list' do
      quizz = Quizz.create! valid_attributes
      delete :destroy, {:id => quizz.to_param}, valid_session
      expect(response).to redirect_to(quizzs_url)
    end
  end


  describe 'POST #validate' do
    context 'with valid params' do
      before(:each) do
        @quizz = FactoryGirl.create(:quizz)

        @question1 = FactoryGirl.create(:question, :quizz => @quizz)
        @question1_correct_answer = FactoryGirl.create(:answer, :question=> @question1, :is_correct => true)
        @question1_wrong_answer = FactoryGirl.create(:answer, :question=> @question1, :is_correct => false)

        @question2 = FactoryGirl.create(:question, :quizz => @quizz)
        @question2_correct_answer = FactoryGirl.create(:answer, :question=> @question2, :is_correct => true)
        @question2_wrong_answer = FactoryGirl.create(:answer, :question=> @question2, :is_correct => false)

      end

      it 'assigns @checked_answer_ids with the id of the selected answers' do
        post :validate, {:id => @quizz, :question => {@question1.id => {:answer_ids => [@question1_correct_answer.id]}, @question2.id => {:answer_ids => [@question2_wrong_answer.id]}}}, valid_session
        expect(assigns(:checked_answer_ids)).to contain_exactly(@question1_correct_answer.id,@question2_wrong_answer.id)
      end

      it 'assigns @errors to empty array if all corrects answers are selected' do
        post :validate, {:id => @quizz, :question => {@question1.id => {:answer_ids => [@question1_correct_answer.id]}, @question2.id => {:answer_ids => [@question2_correct_answer.id]}}}, valid_session
        expect(assigns(:errors)).to eq([])
      end

      it 'adds to @errors the question where no answer is selected' do
        post :validate, {:id => @quizz, :question => {@question2.id => {:answer_ids => [@question2_correct_answer.id]}}}, valid_session
        expect(assigns(:errors)).to contain_exactly(@question1)
      end

      it 'adds to @errors the question where wrong answer is selected' do
        post :validate, {:id => @quizz, :question => {@question1.id => {:answer_ids =>[@question1_wrong_answer.id]}, @question2.id => {:answer_ids => [@question2_wrong_answer.id]}}}, valid_session
        expect(assigns(:errors)).to contain_exactly(@question1, @question2)
      end

      it 'adds to @errors the question where wrong answer is selected only one of them is false' do
        post :validate, {:id => @quizz, :question => {@question1.id => {:answer_ids =>[@question1_correct_answer.id]}, @question2.id => {:answer_ids => [@question2_wrong_answer.id]}}}, valid_session
        expect(assigns(:errors)).to contain_exactly(@question2)
      end

      it 'adds to @errors the question where wrong answer is selected and another question is not answered' do
        post :validate, {:id => @quizz, :question => {@question2.id => {:answer_ids => [@question2_wrong_answer.id]}}}, valid_session
        expect(assigns(:errors)).to contain_exactly(@question1, @question2)
      end
    end
  end

end
